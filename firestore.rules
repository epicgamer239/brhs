rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    
    function isEmailVerified() {
      return request.auth.token.email_verified == true;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidEmail(email) {
      return email is string && email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidRole(role) {
      return role in ['student', 'teacher', 'admin'];
    }
    
    function isValidMathLabRole(role) {
      return role in ['', 'tutor', 'student'];
    }
    
    function isValidCourse(course) {
      return course in ['Algebra 1', 'Algebra 2', 'Algebra 2 Trig', 'Functions', 'Trig with Adv Alg', 'Geometry'];
    }
    
    function isValidRequestStatus(status) {
      return status in ['pending', 'accepted', 'completed', 'cancelled'];
    }
    
    function isAdminByEmail() {
      return isAuthenticated() && 
             request.auth.token.email == '1021676@lcps.org'; // Hardcoded admin email
    }
    
    // Users collection - Contains user profile data
    match /users/{userId} {
      // Allow read access to own user document
      allow read: if isAuthenticated() && isOwner(userId);
      
      // Allow create: Only during signup process (email verification not required for initial creation)
      allow create: if isAuthenticated() && 
                      isOwner(userId) &&
                      // Validate required fields
                      request.resource.data.keys().hasAll(['email', 'displayName', 'role', 'createdAt', 'updatedAt']) &&
                      // Validate field types and values
                      request.resource.data.email is string &&
                      isValidEmail(request.resource.data.email) &&
                      request.resource.data.displayName is string &&
                      request.resource.data.displayName.size() > 0 &&
                      request.resource.data.displayName.size() <= 100 &&
                      request.resource.data.role is string &&
                      isValidRole(request.resource.data.role) &&
                      request.resource.data.createdAt is timestamp &&
                      request.resource.data.updatedAt is timestamp &&
                      // Ensure user can only set their own email
                      request.resource.data.email == request.auth.token.email &&
                      // Prevent role escalation during signup
                      request.resource.data.role == 'student';
      
      // Allow update: Only own document with restrictions, or admin updates
      allow update: if isAuthenticated() && (
                        // Own document updates
                        (isOwner(userId) &&
                         // Prevent changing critical fields
                         request.resource.data.email == resource.data.email &&
                         request.resource.data.uid == resource.data.uid &&
                         request.resource.data.createdAt == resource.data.createdAt &&
                         // Validate updated fields
                         request.resource.data.displayName is string &&
                         request.resource.data.displayName.size() > 0 &&
                         request.resource.data.displayName.size() <= 100 &&
                         request.resource.data.role is string &&
                         isValidRole(request.resource.data.role) &&
                         request.resource.data.updatedAt is timestamp &&
                         // Only allow role changes by admins or prevent role escalation
                         (isAdminUser() || request.resource.data.role == resource.data.role) &&
                         // Only allow mathLabRole changes by admins or prevent role escalation
                         (isAdminUser() || request.resource.data.mathLabRole == resource.data.mathLabRole) &&
                         // Validate optional fields if present
                         (!('mathLabRole' in request.resource.data) || 
                          (request.resource.data.mathLabRole is string && 
                           isValidMathLabRole(request.resource.data.mathLabRole))) &&
                         (!('photoURL' in request.resource.data) || 
                          (request.resource.data.photoURL is string && 
                           request.resource.data.photoURL.size() <= 500))) ||
                        // Admin updates (can modify any user)
                        (isAdminUser() &&
                         // Validate updated fields
                         request.resource.data.displayName is string &&
                         request.resource.data.displayName.size() > 0 &&
                         request.resource.data.displayName.size() <= 100 &&
                         request.resource.data.role is string &&
                         isValidRole(request.resource.data.role) &&
                         request.resource.data.updatedAt is timestamp &&
                         // Validate optional fields if present
                         (!('mathLabRole' in request.resource.data) || 
                          (request.resource.data.mathLabRole is string && 
                           isValidMathLabRole(request.resource.data.mathLabRole))) &&
                         (!('photoURL' in request.resource.data) || 
                          (request.resource.data.photoURL is string && 
                           request.resource.data.photoURL.size() <= 500)))
                      );
      
      // Allow delete: Only admins can delete users
      allow delete: if isAdminByEmail();
    }
    
    // TutoringRequests collection - Contains math lab tutoring requests
    match /tutoringRequests/{requestId} {
      // Allow read: Users can read their own requests, or any pending requests
      allow read: if isAuthenticated() && (
                      // Users can read their own requests
                      resource.data.studentId == request.auth.uid ||
                      // Anyone can read pending requests
                      resource.data.status == 'pending' ||
                      // Admins can read all requests
                      isAdminByEmail()
                    );
      
      // Allow create: Any authenticated user can create requests
      allow create: if isAuthenticated() &&
                      // Validate required fields
                      request.resource.data.keys().hasAll(['studentId', 'studentName', 'course', 'description', 'status', 'createdAt', 'updatedAt']) &&
                      // Validate field types and values
                      request.resource.data.studentId is string &&
                      request.resource.data.studentId == request.auth.uid &&
                      request.resource.data.studentName is string &&
                      request.resource.data.studentName.size() > 0 &&
                      request.resource.data.studentName.size() <= 100 &&
                      request.resource.data.course is string &&
                      isValidCourse(request.resource.data.course) &&
                      request.resource.data.description is string &&
                      request.resource.data.description.size() > 0 &&
                      request.resource.data.description.size() <= 1000 &&
                      request.resource.data.status is string &&
                      request.resource.data.status == 'pending' &&
                      request.resource.data.createdAt is timestamp &&
                      request.resource.data.updatedAt is timestamp &&
                      // Validate optional fields if present
                      (!('tutorId' in request.resource.data) || 
                       (request.resource.data.tutorId is string && 
                        request.resource.data.tutorId.size() > 0)) &&
                      (!('tutorName' in request.resource.data) || 
                       (request.resource.data.tutorName is string && 
                        request.resource.data.tutorName.size() <= 100)) &&
                      (!('acceptedAt' in request.resource.data) || 
                       (request.resource.data.acceptedAt is timestamp)) &&
                      (!('completedAt' in request.resource.data) || 
                       (request.resource.data.completedAt is timestamp));
      
      // Allow update: Users can update their own requests, or admins can update any
      allow update: if isAuthenticated() && (
                        // Users can update their own pending requests
                        (resource.data.studentId == request.auth.uid && 
                         resource.data.status == 'pending' &&
                         // Only allow updating description and course
                         request.resource.data.studentId == resource.data.studentId &&
                         request.resource.data.status == resource.data.status &&
                         request.resource.data.createdAt == resource.data.createdAt &&
                         request.resource.data.updatedAt is timestamp) ||
                        // Users can accept pending requests (become tutors)
                        (resource.data.status == 'pending' &&
                         request.resource.data.status == 'accepted' &&
                         request.resource.data.tutorId == request.auth.uid &&
                         request.resource.data.acceptedAt is timestamp &&
                         request.resource.data.updatedAt is timestamp) ||
                        // Users can complete accepted requests they're assigned to
                        (resource.data.status == 'accepted' &&
                         resource.data.tutorId == request.auth.uid &&
                         request.resource.data.status == 'completed' &&
                         request.resource.data.completedAt is timestamp &&
                         request.resource.data.updatedAt is timestamp) ||
                        // Users can cancel their own requests
                        (resource.data.studentId == request.auth.uid &&
                         request.resource.data.status == 'cancelled' &&
                         request.resource.data.updatedAt is timestamp) ||
                        // Admins can update any request
                        isAdminByEmail()
                      );
      
      // Allow delete: Users can delete their own pending requests, or admins can delete any
      allow delete: if isAuthenticated() && (
                        (resource.data.studentId == request.auth.uid && 
                         resource.data.status == 'pending') ||
                        // Allow anyone to delete old pending requests for cleanup
                        (resource.data.status == 'pending') ||
                        isAdminByEmail()
                      );
    }
    
    // CompletedSessions collection - Contains completed tutoring session history
    match /completedSessions/{sessionId} {
      // Allow read: Users can read sessions they participated in
      allow read: if isAuthenticated() && (
                      // Users can read sessions they participated in
                      resource.data.studentId == request.auth.uid ||
                      // Users can read sessions they tutored
                      resource.data.tutorId == request.auth.uid ||
                      // Admins can read all sessions
                      isAdminByEmail()
                    );
      
      // Allow create: Any authenticated user can create completed sessions
      allow create: if isAuthenticated() &&
                      // Validate required fields
                      request.resource.data.keys().hasAll(['studentId', 'studentName', 'tutorId', 'tutorName', 'course', 'startTime', 'endTime', 'duration', 'completedAt', 'status']) &&
                      // Validate field types and values
                      request.resource.data.studentId is string &&
                      request.resource.data.studentName is string &&
                      request.resource.data.studentName.size() > 0 &&
                      request.resource.data.studentName.size() <= 100 &&
                      request.resource.data.tutorId is string &&
                      request.resource.data.tutorId == request.auth.uid &&
                      request.resource.data.tutorName is string &&
                      request.resource.data.tutorName.size() > 0 &&
                      request.resource.data.tutorName.size() <= 100 &&
                      request.resource.data.course is string &&
                      isValidCourse(request.resource.data.course) &&
                      request.resource.data.startTime is timestamp &&
                      request.resource.data.endTime is timestamp &&
                      request.resource.data.duration is number &&
                      request.resource.data.duration > 0 &&
                      request.resource.data.completedAt is timestamp &&
                      request.resource.data.status is string &&
                      request.resource.data.status == 'completed' &&
                      // Validate optional fields if present
                      (!('studentEmail' in request.resource.data) || 
                       (request.resource.data.studentEmail is string && 
                        isValidEmail(request.resource.data.studentEmail))) &&
                      (!('tutorEmail' in request.resource.data) || 
                       (request.resource.data.tutorEmail is string && 
                        isValidEmail(request.resource.data.tutorEmail)));
      
      // Allow update: Only admins can update completed sessions
      allow update: if isAdminByEmail();
      
      // Allow delete: Only admins can delete completed sessions
      allow delete: if isAdminByEmail();
    }
    
    // Deny all other collections and documents
    match /{document=**} {
      allow read, write: if false;  
    }
  }
}
