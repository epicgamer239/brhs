rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isEmailVerified() {
      return request.auth.token.email_verified == true;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidEmail(email) {
      return email is string && email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidRole(role) {
      return role in ['student', 'teacher', 'admin'];
    }
    
    function isValidMathLabRole(role) {
      return role in ['', 'tutor', 'student'];
    }
    
    function isValidCourse(course) {
      return course in ['Algebra 1', 'Algebra 2', 'Algebra 2 Trig', 'Functions', 'Trig with Adv Alg', 'Geometry'];
    }
    
    function isValidRequestStatus(status) {
      return status in ['pending', 'accepted', 'completed', 'cancelled'];
    }
    
    function isAdminByEmail() {
      return isAuthenticated() && 
             request.auth.token.email == '1021676@lcps.org';
    }
    
    // Helper function to check if user is a tutor (by mathLabRole)
    function isTutor() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.mathLabRole == 'tutor';
    }
    
    // Helper function to check if user is a student (by mathLabRole)
    function isStudent() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.mathLabRole == 'student';
    }
    
    // Helper function to check if user is teacher or admin
    function isTeacherOrAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin'];
    }
    
    // Users collection - Contains user profile data
    match /users/{userId} {
      // Allow read: Own document or admins can read all
      allow read: if isAuthenticated() && (isOwner(userId) || isAdminByEmail());
      
      // Allow create: During signup process
      allow create: if isAuthenticated() && 
                      isOwner(userId) &&
                      // Validate required fields
                      request.resource.data.keys().hasAll(['email', 'displayName', 'role', 'createdAt', 'updatedAt']) &&
                      // Validate field types and values
                      request.resource.data.email is string &&
                      isValidEmail(request.resource.data.email) &&
                      request.resource.data.displayName is string &&
                      request.resource.data.displayName.size() > 0 &&
                      request.resource.data.displayName.size() <= 100 &&
                      request.resource.data.role is string &&
                      isValidRole(request.resource.data.role) &&
                      request.resource.data.createdAt is timestamp &&
                      request.resource.data.updatedAt is timestamp &&
                      // Ensure user can only set their own email
                      request.resource.data.email == request.auth.token.email &&
                      // Allow admin role for admin emails, otherwise default to student
                      (isAdminByEmail() || request.resource.data.role == 'student');
      
      // Allow update: Own document with restrictions, or admin updates
      allow update: if isAuthenticated() && (
                        // Own document updates
                        (isOwner(userId) &&
                         // Prevent changing critical fields
                         request.resource.data.email == resource.data.email &&
                         request.resource.data.createdAt == resource.data.createdAt &&
                         // Validate updated fields
                         request.resource.data.displayName is string &&
                         request.resource.data.displayName.size() > 0 &&
                         request.resource.data.displayName.size() <= 100 &&
                         request.resource.data.role is string &&
                         isValidRole(request.resource.data.role) &&
                         request.resource.data.updatedAt is timestamp &&
                         // Only allow role changes by admins or prevent role escalation
                         (isAdminByEmail() || request.resource.data.role == resource.data.role) &&
                         // Validate optional fields if present
                         (!('mathLabRole' in request.resource.data) || 
                          (request.resource.data.mathLabRole is string && 
                           isValidMathLabRole(request.resource.data.mathLabRole))) &&
                         (!('photoURL' in request.resource.data) || 
                          (request.resource.data.photoURL is string && 
                           request.resource.data.photoURL.size() <= 500))) ||
                        // Admin updates (can modify any user)
                        isAdminByEmail()
                      );
      
      // Allow delete: Only admins can delete users
      allow delete: if isAdminByEmail();
    }
    
    // TutoringRequests collection - Contains math lab tutoring requests
    match /tutoringRequests/{requestId} {
      // Allow read: 
      // - Users can read their own requests (as student)
      // - Tutors can read requests they're assigned to (as tutor)
      // - Anyone can read pending requests (for tutor dashboard)
      // - Teachers/admins can read all requests
      allow read: if isAuthenticated() && (
                      // Users can read their own requests
                      resource.data.studentId == request.auth.uid ||
                      // Tutors can read requests they're assigned to
                      (isTutor() && resource.data.tutorId == request.auth.uid) ||
                      // Anyone can read pending requests (for tutor dashboard)
                      resource.data.status == 'pending' ||
                      // Teachers and admins can read all requests
                      isTeacherOrAdmin() ||
                      // Admins can read all requests
                      isAdminByEmail()
                    );
      
      // Allow create: Any authenticated user can create requests
      allow create: if isAuthenticated() &&
                      // Validate required fields
                      request.resource.data.keys().hasAll(['studentId', 'studentName', 'course', 'description', 'status', 'createdAt', 'updatedAt']) &&
                      // Validate field types and values
                      request.resource.data.studentId is string &&
                      request.resource.data.studentId == request.auth.uid &&
                      request.resource.data.studentName is string &&
                      request.resource.data.studentName.size() > 0 &&
                      request.resource.data.studentName.size() <= 100 &&
                      request.resource.data.course is string &&
                      isValidCourse(request.resource.data.course) &&
                      request.resource.data.description is string &&
                      request.resource.data.description.size() > 0 &&
                      request.resource.data.description.size() <= 1000 &&
                      request.resource.data.status is string &&
                      request.resource.data.status == 'pending' &&
                      request.resource.data.createdAt is timestamp &&
                      request.resource.data.updatedAt is timestamp &&
                      // Validate optional fields if present
                      (!('tutorId' in request.resource.data) || 
                       (request.resource.data.tutorId is string && 
                        request.resource.data.tutorId.size() > 0)) &&
                      (!('tutorName' in request.resource.data) || 
                       (request.resource.data.tutorName is string && 
                        request.resource.data.tutorName.size() <= 100)) &&
                      (!('acceptedAt' in request.resource.data) || 
                       (request.resource.data.acceptedAt is timestamp)) &&
                      (!('completedAt' in request.resource.data) || 
                       (request.resource.data.completedAt is timestamp));
      
      // Allow update: 
      // - Students can update their own pending requests
      // - Tutors can update pending requests (to accept them)
      // - Tutors can update requests they're assigned to (start session, complete)
      // - Teachers/admins can update any request
      allow update: if isAuthenticated() && (
                        // Students can update their own pending requests
                        (resource.data.studentId == request.auth.uid && 
                         resource.data.status == 'pending' &&
                         // Only allow updating description and course
                         request.resource.data.studentId == resource.data.studentId &&
                         request.resource.data.status == resource.data.status &&
                         request.resource.data.createdAt == resource.data.createdAt &&
                         request.resource.data.course is string &&
                         isValidCourse(request.resource.data.course) &&
                         request.resource.data.description is string &&
                         request.resource.data.description.size() > 0 &&
                         request.resource.data.description.size() <= 1000 &&
                         request.resource.data.updatedAt is timestamp) ||
                        // Tutors can update pending requests (to accept them)
                        (isTutor() && 
                         resource.data.status == 'pending' &&
                         // Allow status change from pending to accepted
                         request.resource.data.status == 'accepted' &&
                         // Validate required fields for accepted status
                         request.resource.data.studentId == resource.data.studentId &&
                         request.resource.data.course == resource.data.course &&
                         request.resource.data.description == resource.data.description &&
                         request.resource.data.createdAt == resource.data.createdAt &&
                         request.resource.data.updatedAt is timestamp &&
                         // Validate new fields for accepted status
                         request.resource.data.tutorId is string &&
                         request.resource.data.tutorId == request.auth.uid &&
                         request.resource.data.tutorName is string &&
                         request.resource.data.tutorName.size() > 0 &&
                         request.resource.data.tutorName.size() <= 100 &&
                         request.resource.data.acceptedAt is timestamp) ||
                        // Tutors can update requests they're assigned to (start session, complete)
                        (isTutor() && 
                         resource.data.tutorId == request.auth.uid &&
                         // Allow status changes: accepted -> completed, or add sessionStartedAt
                         (request.resource.data.status == 'completed' || 
                          ('sessionStartedAt' in request.resource.data)) &&
                         // Validate required fields
                         request.resource.data.tutorId == resource.data.tutorId &&
                         request.resource.data.studentId == resource.data.studentId &&
                         request.resource.data.course == resource.data.course &&
                         request.resource.data.description == resource.data.description &&
                         request.resource.data.createdAt == resource.data.createdAt &&
                         request.resource.data.updatedAt is timestamp &&
                         // Validate optional fields
                         (!('acceptedAt' in request.resource.data) || 
                          (request.resource.data.acceptedAt is timestamp)) &&
                         (!('sessionStartedAt' in request.resource.data) || 
                          (request.resource.data.sessionStartedAt is timestamp)) &&
                         (!('completedAt' in request.resource.data) || 
                          (request.resource.data.completedAt is timestamp))) ||
                        // Teachers and admins can update any request
                        isTeacherOrAdmin() ||
                        // Admins can update any request
                        isAdminByEmail()
                      );
      
      // Allow delete: 
      // - Students can delete their own pending requests
      // - Tutors can delete requests they're assigned to (when ending sessions)
      // - Teachers/admins can delete any request
      allow delete: if isAuthenticated() && (
                        // Students can delete their own pending requests
                        (resource.data.studentId == request.auth.uid && 
                         resource.data.status == 'pending') ||
                        // Tutors can delete requests they're assigned to (when ending sessions)
                        (isTutor() && 
                         resource.data.tutorId == request.auth.uid) ||
                        // Teachers and admins can delete any request
                        isTeacherOrAdmin() ||
                        // Admins can delete any request
                        isAdminByEmail()
                      );
    }
    
    // CompletedSessions collection - Contains completed tutoring sessions
    match /completedSessions/{sessionId} {
      // Allow read: 
      // - Students can read sessions they participated in
      // - Tutors can read sessions they conducted
      // - Teachers/admins can read all sessions
      allow read: if isAuthenticated() && (
                      // Students can read sessions they participated in
                      resource.data.studentId == request.auth.uid ||
                      // Tutors can read sessions they conducted
                      (isTutor() && resource.data.tutorId == request.auth.uid) ||
                      // Teachers and admins can read all sessions
                      isTeacherOrAdmin() ||
                      // Admins can read all sessions
                      isAdminByEmail()
                    );
      
      // Allow create: 
      // - Tutors can create sessions for requests they accepted
      // - Teachers/admins can create any session
      allow create: if isAuthenticated() &&
                      // Validate required fields
                      request.resource.data.keys().hasAll(['studentId', 'studentName', 'tutorId', 'tutorName', 'course', 'duration', 'completedAt', 'status']) &&
                      // Validate field types and values
                      request.resource.data.studentId is string &&
                      request.resource.data.studentName is string &&
                      request.resource.data.studentName.size() > 0 &&
                      request.resource.data.studentName.size() <= 100 &&
                      request.resource.data.tutorId is string &&
                      request.resource.data.tutorName is string &&
                      request.resource.data.tutorName.size() > 0 &&
                      request.resource.data.tutorName.size() <= 100 &&
                      request.resource.data.course is string &&
                      isValidCourse(request.resource.data.course) &&
                      request.resource.data.duration is number &&
                      request.resource.data.duration > 0 &&
                      request.resource.data.completedAt is timestamp &&
                      request.resource.data.status is string &&
                      request.resource.data.status == 'completed' &&
                      // Validate optional fields if present
                      (!('studentEmail' in request.resource.data) || 
                       (request.resource.data.studentEmail is string && 
                        isValidEmail(request.resource.data.studentEmail))) &&
                      (!('tutorEmail' in request.resource.data) || 
                       (request.resource.data.tutorEmail is string && 
                        isValidEmail(request.resource.data.tutorEmail))) &&
                      // Allow creation by tutors (for their own sessions) or teachers/admins
                      (isTutor() || isTeacherOrAdmin() || isAdminByEmail());
      
      // Allow update: Only teachers/admins can update completed sessions
      allow update: if isTeacherOrAdmin() || isAdminByEmail();
      
      // Allow delete: Only teachers/admins can delete completed sessions
      allow delete: if isTeacherOrAdmin() || isAdminByEmail();
    }
    
    // Deny all other collections and documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}